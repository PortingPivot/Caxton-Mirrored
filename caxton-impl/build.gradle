plugins {
    id 'io.github.arc-blroth.cargo-wrapper' version '1.1.0'
}

repositories {
    mavenCentral()
}


import ai.arcblroth.cargo.CargoExtension
import ai.arcblroth.cargo.CargoTask
import com.google.common.collect.ImmutableMap
import com.google.common.collect.ImmutableSet

Map.Entry<String, TaskProvider<Task>> registerCrossBuildTask(String taskName, String targetName, String dllName) {
    def cargoTask = tasks.register(taskName + ".cargo", CargoTask) {
        def configuration = new CargoExtension()
        configuration.cargoCommand = 'cross'
        configuration.arguments = ['--target', targetName]
        configuration.outputs = [(targetName): dllName]
        configuration.profile = 'release'
        configure(configuration)
    }
    def copyTask = tasks.register(taskName, Copy) {
        dependsOn cargoTask
        def task = cargoTask.get()
        from(task.outputFiles) {
            rename(name -> "$targetName-" + name)
        }
        into "build/natives/"
    }
    Map.entry(targetName, copyTask)
}

def cargoCrossBuildTasks = ImmutableMap.copyOf([
        registerCrossBuildTask('compileWindowsLibrary', 'x86_64-pc-windows-gnu', 'caxton_impl.dll'),
        registerCrossBuildTask('compileLinuxLibrary', 'x86_64-unknown-linux-gnu', 'libcaxton_impl.so'),
])

cargo {
    cargoCommand = 'cargo'
    outputs = ['': System.mapLibraryName('caxton_impl')]
    profile = 'release'
}

afterEvaluate {
    def additionalTargetsStr = System.getProperty("xyz.flirora.caxton.additionalTargets");
    Set<String> additionalTargets = ImmutableSet.of()
    if (additionalTargetsStr != null) {
        additionalTargets = new HashSet<>(Arrays.asList(additionalTargetsStr.split(",")))
    }

    def addedTargets = [];
    for (def e : cargoCrossBuildTasks) {
        if (additionalTargets.contains(e.key)) {
            artifacts.add('default', e.value)
            addedTargets.add(e.key)
        }
    }
    if (!addedTargets.isEmpty()) {
        additionalTargets.removeAll(addedTargets)
    }

    if (!additionalTargets.isEmpty()) {
        throw new GradleException("Unknown targets: " + additionalTargets)
    }
}
