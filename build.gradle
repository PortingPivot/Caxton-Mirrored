plugins {
    id 'fabric-loom' version '1.0.11'
    id 'maven-publish'
    id "com.ageet.gradle-swig" version "0.1.2"
    id 'net.freudasoft.gradle-cmake-plugin' version '0.0.2'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url "https://jitpack.io" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Used for extending the FontType enum.
    modImplementation include("com.github.Chocohead:Fabric-ASM:v2.3")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.register("generateSwig", SwigTask) {
    doFirst {
        println "Generating bindings to native libraries..."
    }
    module = 'Harfbuzz'
    packageName = 'xyz.flirora.bindings'
    source = file('swig/bindings.i')
    includePaths = []
    javaSourcesPath = file('build/bindings/java/xyz/flirora/bindings/')
    wrapperTargetFile = file('build/bindings/cpp/hb_wrapper.c')
}

sourceSets {
    main {
        java {
            srcDir 'build/bindings/java'
        }
        resources {
            srcDir 'build/natives/'
        }
    }
}

cmake {
    sourceFolder = file("swig/")
    buildConfig = 'Release'
    buildTarget = 'caxtonbindings'
}

tasks.named("cmakeBuild") {
    dependsOn("generateSwig")
}

tasks.register("copyLib", Copy) {
    dependsOn "cmakeBuild"
    from layout.buildDirectory.file("cmake/libcaxtonbindings.so")
    into layout.buildDirectory.dir("natives/linux-x86-64")
}

tasks.named("compileJava") {
    dependsOn("generateSwig")
}

//tasks.named("sourcesJar") {
//    dependsOn("generateSwig", "copyLib")
//}

tasks.named("processResources") {
    dependsOn("copyLib")
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
