import java.util.regex.Pattern

plugins {
    id 'fabric-loom' version '1.0.11'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url "https://jitpack.io" }
    maven { url "https://maven.terraformersmc.com" }
}

configurations {
    backend {
        canBeConsumed false
        canBeResolved true
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Used for extending the FontType enum.
    modImplementation include("com.github.Chocohead:Fabric-ASM:v2.3")

    // Used for more precise mixins (e.g. for registering new shaders).
    implementation 'com.github.LlamaLad7:MixinExtras:0.1.1-rc.4'
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1-rc.4")
    include('com.github.LlamaLad7:MixinExtras:0.1.1-rc.4')

    modLocalRuntime "com.terraformersmc:modmenu:5.0.0-alpha.4"

    // Used for caching layout results
    modImplementation 'com.github.ben-manes.caffeine:caffeine:3.1.2'
    include('com.github.ben-manes.caffeine:caffeine:3.1.2')

    backend(project(':caxton-impl'))
}

def identifyHostRustcPlatform = tasks.register("identifyHostRustcPlatform", Exec) {
    commandLine 'rustc', '-vV'

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        def output = standardOutput.toString()
        def matcher = Pattern.compile("^host: (.*)\$", Pattern.MULTILINE).matcher(output)
        matcher.find()
        def platform = matcher.group(1)
        println("Platform is $platform")
        platform
    }
}

processResources {
    dependsOn identifyHostRustcPlatform

    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    from(configurations.backend) {
        eachFile {
            if (!name.contains("-")) {
                def hostTarget = identifyHostRustcPlatform.get().output()
                name = hostTarget + "-" + name
            }
            path = "natives/" + path
        }
    }
}

loom {
    runs {
        client {
            environmentVariable("RUST_BACKTRACE", "1")
        }
    }
    accessWidenerPath = file("src/main/resources/caxton.accesswidener")
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

javadoc {
    options.overview = 'src/main/java/overview.html'
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
